/*
 * Copyright (C) 2011-2021 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* Enclave.edl - Top EDL file. */

enclave {
    from "sgx_tstdc.edl" import *;
    from "sgx_tswitchless.edl" import *;

    trusted {
        public void ecall_repeat_ocalls(unsigned long nrepeats, int use_switchless);

        public void ecall_empty(void);
        public void ecall_empty_switchless(void) transition_using_threads;

        public void ecall_challenge_first_step([out] int* fileIndex,[out] int* blockIndex, [in, size=encMessageLen] unsigned char* enc_files_nonce, int encMessageLen,  int nonce_size, int fileSize, int blockSize, int fileCount);
        public void ecall_challenge_final_step([out, size=32] unsigned char* final_hash);

        public void ecall_challenge_next_step([out] int* fileIndex,[out] int* blockIndex, [in, size=encMessageLen] unsigned char* files_nonce, int encMessageLen , int fileSize, int blockSize, int fileCount);
        public void ecall_challenge_next_step_switchless([out] int* fileIndex,[out] int* blockIndex, [in, size=encMessageLen] unsigned char* files_nonce, int encMessageLen , int fileSize, int blockSize, int fileCount) transition_using_threads;






    };

    untrusted {
        void ocall_empty(void);
        void ocall_empty_switchless(void) transition_using_threads;
        void print_char_ocall( [in, size=TextLen] unsigned char* text, int TextLen);
        void printHexOcall([in, string] const char *str, [in, size = len] const unsigned char *hash, size_t len);
        
    };
};
